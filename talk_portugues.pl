% ?-['compila_gramatica.pl'].
?-['gramatica.pl'].


:- op(500,xfy,&).
:- op(510,xfy,=>).
:- op(100,fx,--).

read_sent(Palavras) :-
	get0(Char),
	read_sent(Char, Palavras).

main_loop :-
	consult('lexical_portugues.pl'),
	write(">> "), % prompt the user
	read_sent(Palavras), % read a sentence
	talk(Palavras, Resposta), % process it with TALK
	print_reply(Resposta), % generate a printed Resposta
	main_loop. % pocess more sentences


%%% talk(Sentence, Reply)
%%% =====================
%%%
%%% Sentence ==> sentence to form a reply to
%%% Reply <== appropriate reply to the sentence


talk(Sentence, Reply) :-
	% parse the sentence
	parse(Sentence, LF, Type),
	
	% convert the FOL logical form into a Horn
	% clause, if possible
	clausify(LF, Clause, FreeVars), !,
	reply(Type, FreeVars, Clause, Reply).

% No parse was found, sentence is too difficult.
talk(_Sentence, error('questão difícil')).




reply(query, FreeVars, Clause, answer([Reply])) :-
call(Clause), atrib(FreeVars, Reply).


atrib(X,X).



reply(assertion, _FreeVars, Assertion, asserted(Assertion)) :-
assert(Assertion), !.

% Replying to some other type of sentence.
reply(_Type, _FreeVars, _Clause, error('unknown type')).
%%% print_reply(Reply)
%%% ==================
%%%
%%% Reply ==> reply generated by reply predicate
%%% that is to be printed to the
%%% standard output.
print_reply(error(ErrorType)) :-
write('Error: "'), write(ErrorType), write('."'), nl.
print_reply(asserted(Assertion)) :-
write('Asserted "'), write(Assertion), write('."'), nl.
print_reply(answer(Answers)) :-
print_answers(Answers).
%%% print_answer(Answers)
%%% =====================
%%%
%%% Answers ==> nonempty list of answers to be printed
%%% to the standard output separated
%%% by commas.
print_answers([Answer]) :- !,
write(Answer), write('.'), nl.
print_answers([Answer|Rest]) :-
write(Answer), write(', '),
print_answers(Rest).
%%% parse(Sentence, LF, Type)
%%% =========================
%%%
%%% Sentence ==> sentence to parse
%%% LF <== logical form (in FOL) of sentence
%%% Type <== type of sentence
%%% (query or assertion)



% Parsing an assertion: a finite sentence without gaps.

parse(Sentence, LF, assertion) :-
%s(LF, nogap, Sentence, []).
sentenca(LF,Sentence,[]).

% Parsing a query: a question.
parse(Sentence, LF, query) :-
interrogacao(LF, Sentence, []).



clausify(Z^A^B&C^D&E^F&G^H^I, (Head:-CD,EF,GHI), FreeVars):-
	Head =.. [B,Z,A],
	CD =.. [D,C],
	EF =.. [F,E],
	GHI =.. [I,G,H].

clausify(A^B=>resp, Clause, FreeVars):- Clause =.. [B,A,FreeVars].

clausify(A^B^C,(H:- T), FreeVars):- H =.. [C,A,X], T =.. [B,X].
clausify(A^B,Clause, FreeVars):-Clause =.. [B,A].



/*=====================================================
Auxiliary Predicates
=====================================================*/


%%% conc(List1, List2, List)
%%% ========================
%%%
%%% List1 ==> a list
%%% List2 ==> a list
%%% List <== the concatenation of the two lists
conc([], List, List).
conc([Element|Rest], List, [Element|LongRest]) :-
conc(Rest, List, LongRest).
%%% read_sent(Words)
%%% ================
%%%
%%% Words ==> set of words read from the
%%% standard input
%%%
%%% Words are delimited by spaces and the
%%% line is ended by a newline. Case is not
%%% folded; punctuation is not stripped.
read_sent(Words) :-
get0(Char),
read_sent(Char, Words).
% prime the lookahead
% get the words
% Newlines end the input.
read_sent(C, []) :- newline(C), !.


% Spaces are ignored.
read_sent(C, Words) :- space(C), !,
get0(Char),
read_sent(Char, Words).
% Everything else starts a word.
read_sent(Char, [Word|Words]) :-
read_word(Char, Chars, Next), % get the word
name(Word, Chars),
% pack the characters
% into an atom
read_sent(Next, Words).
% get some more words
%%% read_word(Chars)
%%% ================
%%%
%%% Chars ==> list of characters read from standard
%%% input and delimited by spaces or
%%% newlines
% Space and newline end a word.

read_word(C, [], C) :- space(C), !.
read_word(C, [], C) :- newline(C), !.

% All other chars are added to the list.

read_word(Char, [Char|Chars], Last) :-
get0(Next),
read_word(Next, Chars, Last). 

%%% space(Char)
%%% ===========
%%%
%%% Char === the ASCII code for the space
%%% character
space(32).
%%% newline(Char)
%%% =============
%%%
%%% Char === the ASCII code for the newline
%%% character
newline(10).

init:-
	write(""),nl,
	main_loop.


% ?- init.

/*=====================================================
Testes

>> principia e um livro
Asserted "livro(principia)."

>> bertrand escreve todo livro
Asserted "escreve(bertrand,_2564):-livro(_2564)."

>> quais dos livros bertrand escreveu
Error: "questão difícil."


>> que bertrand escreve
principia.


>> todo professor que escreve um programa conhece bertrand
Asserted "conhece(_8140,bertrand):-professor(_8140),programa(_8202),escreve(_8140,_8202)."

=====================================================*/

